{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/input-form/input-form.component.css","webpack:///./src/app/input-form/input-form.component.html","webpack:///./src/app/input-form/input-form.component.ts","webpack:///./src/app/motor-data.service.ts","webpack:///./src/app/motor.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<section class=\\\"motorapp\\\">\\r\\n  <header class=\\\"header\\\">\\r\\n    <h1>Motors</h1>\\r\\n    <div class=\\\"motor-data-container\\\">\\r\\n      <app-input-form [motor]=\\\"newMotor\\\">\\r\\n      </app-input-form>\\r\\n    </div>\\r\\n  </header>\\r\\n  <section class=\\\"main\\\" *ngIf=\\\"motors.length > 0\\\">\\r\\n      <div class=\\\"motor-data-container\\\" *ngFor=\\\"let motor of motors\\\">\\r\\n          <app-input-form [motor]=\\\"motor\\\">\\r\\n          </app-input-form>\\r\\n        </div>\\r\\n  </section>\\r\\n  <footer class=\\\"footer\\\" *ngIf=\\\"motors.length > 0\\\">\\r\\n    <span class=\\\"motor-count\\\"><strong>{{motors.length}}</strong> {{motors.length == 1 ? 'motor' : 'motors'}} </span>\\r\\n  </footer>\\r\\n</section>\"","import { Component } from '@angular/core';\r\nimport {MotorDataService } from './motor-data.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {Motor} from './motor';\r\nimport {InputFormComponent} from './input-form/input-form.component';\r\nimport { throwMatDialogContentAlreadyAttachedError } from '@angular/material';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  newMotor: Motor = new Motor();\r\n\r\n  constructor(private motorDataService: MotorDataService) {\r\n  }\r\n\r\n  get motors() {\r\n    return this.motorDataService.getAllMotors();\r\n  }\r\n\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { FormsModule  } from '@angular/forms';\r\nimport { HttpClientModule  } from '@angular/common/http';\r\nimport { \r\n  MatFormFieldModule, \r\n  MatInputModule, \r\n  MatOptionModule, \r\n  MatSelectModule,\r\n  MatButtonModule,\r\n  MatExpansionModule} from '@angular/material';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport { InputFormComponent } from './input-form/input-form.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    InputFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule, \r\n    HttpClientModule,\r\n    MatFormFieldModule,\r\n    MatInputModule, \r\n    MatOptionModule,\r\n    MatSelectModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatExpansionModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { \r\n  constructor() {\r\n    \r\n  }\r\n}\r\n","module.exports = \".expansion-panel-app {\\r\\n    margin: 18px;\\r\\n}\"","module.exports = \"<mat-accordion>\\n  <mat-expansion-panel class=\\\"expansion-panel-app\\\" (opened)=\\\"panelOpenState = true\\\"\\n                       (closed)=\\\"panelOpenState = false\\\">\\n    <mat-expansion-panel-header>\\n      <mat-panel-title>\\n        {{ motor.id ? motor.id : \\\"Register new motor\\\"}}\\n      </mat-panel-title>\\n    </mat-expansion-panel-header>\\n    <mat-form-field>\\n      <mat-select placeholder=\\\"Number of Poles\\\" [(value)]=\\\"nPoles\\\" [(ngModel)]=\\\"motor.numberPoles\\\">\\n        <mat-option></mat-option>\\n        <mat-option *ngFor=\\\"let option of numberPolesOptions\\\" [value]=\\\"option\\\">{{option}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n  \\n    <mat-form-field>\\n          <mat-select placeholder=\\\"Voltage\\\" [(value)]=\\\"volt\\\" [(ngModel)]=\\\"motor.voltage\\\">\\n            <mat-option></mat-option>\\n            <mat-option *ngFor=\\\"let option of voltageOptions\\\" [value]=\\\"option\\\">{{option}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n  \\n    <mat-form-field>\\n          <mat-select placeholder=\\\"Duty Class\\\" [(value)]=\\\"duty\\\" [(ngModel)]=\\\"motor.dutyClass\\\">\\n            <mat-option></mat-option>\\n            <mat-option *ngFor=\\\"let option of dutyClassOptions\\\" [value]=\\\"option\\\">{{option}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n  \\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Rated Current\\\" type=\\\"number\\\" [(ngModel)]=\\\"motor.ratedCurrent\\\">\\n    </mat-form-field>\\n  \\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Rated Power\\\" type=\\\"number\\\" [(ngModel)]=\\\"motor.ratedPower\\\">\\n    </mat-form-field>\\n  \\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Maximum Torque\\\" type=\\\"number\\\" [(ngModel)]=\\\"motor.maximumTorque\\\">\\n    </mat-form-field>\\n  \\n    <button mat-raised-button color=\\\"accent\\\" data-toggle=\\\"collapse\\\" (click)=\\\"saveMotor(motor)\\\">Save</button>\\n  \\n    <button mat-raised-button color=\\\"primary\\\" data-toggle=\\\"collapse\\\" (click)=\\\"cancelMotorChange()\\\">Cancel</button>  \\n    \\n    <button mat-raised-button color=\\\"warn\\\" data-toggle=\\\"collapse\\\" *ngIf=\\\"motor.id\\\" (click)=\\\"removeMotor(motor)\\\">Delete</button> \\n\\n  </mat-expansion-panel>\\n</mat-accordion>\"","import { Component, Input, OnInit, Injectable } from '@angular/core';\n\nimport { Motor } from '../motor';\nimport {MotorDataService } from '../motor-data.service';\n\n@Component({\n  selector: 'app-input-form',\n  templateUrl: './input-form.component.html',\n  styleUrls: ['./input-form.component.css']\n})\n\nexport class InputFormComponent implements OnInit {\n\n  @Input() motor: Motor;\n\n  numberPolesOptions = [2,4,6,8];\n\n  voltageOptions = [220,380,440];\n\n  dutyClassOptions = [\"S1\",\"S2\",\"S3\",\"S4\",\"S5\"];\n\n  backupMotor: Motor;\n\n  constructor(private motorDataService: MotorDataService) {\n  }\n\n  ngOnInit() {\n    if(this.motor.id) {\n      this.updateBackup(this.motor);\n    }\n  }\n\n  updateBackup(motor: Motor) {\n    this.backupMotor = Object.assign({},motor);\n  }\n\n  saveMotor(motor: Motor) {\n    if(motor.id) {\n      this.motorDataService.updateMotorById(motor.id, motor);\n      this.updateBackup(motor);\n    }\n    else {\n      this.motorDataService.addMotor(Object.assign({}, motor));\n      this.clearForm();\n    }\n  }\n\n  cancelMotorChange(){\n    this.clearForm();\n  }\n\n  clearForm(){\n    if (this.motor.id) {\n      this.motor = Object.assign({}, this.backupMotor);\n    }\n    else {\n      this.motor = new Motor;\n    }\n  }\n\n  removeMotor(motor) {\n    this.motorDataService.deleteMotorById(motor.id);\n  }\n\n}\n","  import {Injectable} from '@angular/core';\r\n  import {Motor} from './motor';\r\n  import { HttpClient } from '@angular/common/http';\r\n\r\n  @Injectable({\r\n    providedIn: 'root',\r\n  })\r\n  export class MotorDataService {\r\n\r\n  lastId: number = 0;\r\n\r\n  motors: Motor[] = [];\r\n\r\n  constructor(private httpClient : HttpClient) {\r\n  }\r\n\r\n  addMotor(motor: Motor): MotorDataService {\r\n    if (!motor.id) {\r\n      motor.id = ++this.lastId;\r\n    }\r\n    this.motors.push(motor);\r\n    return this;\r\n  }\r\n\r\n  deleteMotorById(id: number): MotorDataService {\r\n    this.motors = this.motors\r\n      .filter(motor => motor.id !== id);\r\n    return this;\r\n  }\r\n\r\n  updateMotorById(id: number, values: Object = {}): Motor {\r\n    let motor = this.getMotorById(id);\r\n    if (!Motor) {\r\n      return null;\r\n    }\r\n    Object.assign(motor, values);\r\n    return motor;\r\n  }\r\n\r\n  getAllMotors(): Motor[] {\r\n    return this.motors;\r\n  }\r\n\r\n  getMotorById(id: number): Motor {\r\n    return this.motors\r\n      .filter(motor => motor.id === id)\r\n      .pop();\r\n  }\r\n\r\n}\r\n","export class Motor {\r\n\tid: number;\r\n\tnumberPoles: number;\r\n\tvoltage: number;\r\n\tdutyClass: string;\r\n\trtdCurrent: number;\r\n\trtdPower: number;\r\n\tmaxTorque: number;\r\n\r\n\tcontructor(values: Object = {}) {\r\n\t\tObject.assign(this, values);\r\n\t}\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}